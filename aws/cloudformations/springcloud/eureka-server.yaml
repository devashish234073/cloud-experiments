Resources:
  cfVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"

  cfSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref cfVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: ap-south-1a

  ec2Eureka:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-03f4878755434977f
      InstanceType: t2.medium
      KeyName: kp1
      Tags:
        - Key: Name
          Value: EC2 running springboot eureka server
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - |
                #!/bin/bash
                apt update -y
                apt-get install -y apache2
                service apache2 start
                cat <<EOF > /var/www/html/index.html
                <!DOCTYPE html>
                <html>
                <head>
                <title>Please wait while startup script completes</title>
                </head>
                <body>
                <h1>Please wait while startup script completes..</h1>
                <script>
                    function getRandomInt() {
                        return Math.floor(Math.random() * 256);
                    }
                    var color = 'rgb(' + getRandomInt() + ',' + getRandomInt() + ',' + getRandomInt() + ')';
                    document.querySelector("h1").style.color = color;
                    setInterval(function() {
                        location.reload();
                    }, 1000);
                </script>
                </body>
                </html>
                EOF
                apt install git -y
                gitv=$(git version)
                public_ip=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
                git clone https://github.com/spring-guides/gs-service-registration-and-discovery
                cd gs-service-registration-and-discovery
                apt install -y openjdk-17-jdk
                java -version
                echo "export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))" | tee -a /etc/profile.d/jdk.sh
                apt install -y maven
                echo $JAVA_HOME
                cd eureka-server
                mvn install
                cd target
                java -jar eureka-server-0.0.1-SNAPSHOT.jar&
                cat <<EOF > /var/www/html/index.html
                <!DOCTYPE html>
                <html>
                <head>
                <title>UI setup done</title>
                </head>
                <body>
                <h1>UI setup done</h1>
                <p>Git Installed: $gitv<p>
                <p>Links</p>
                <ul>
                <li><a href="http://${public_ip}:8761">Click Here To Eureka Server</a></li>
                </ul>
                </body>
                </html>
                EOF
                systemctl enable apache2
      NetworkInterfaces:
        - DeviceIndex: "0"
          AssociatePublicIpAddress: "true"
          DeleteOnTermination: "true"
          SubnetId: !Ref cfSubnet1
          GroupSet:
            - !Ref MySecurityGroup

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref cfVPC
      GroupDescription: Allow SSH and HTTP traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8761
          ToPort: 8761
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: {}

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref cfVPC
      InternetGatewayId: !Ref MyInternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref cfVPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref cfSubnet1
      RouteTableId: !Ref PublicRouteTable

  MyNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref cfVPC

  MyNetworkAclEntryIngress1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      Egress: false
      PortRange:
        From: 22
        To: 22

  MyNetworkAclEntryEgress1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      Egress: true
      PortRange:
        From: 22
        To: 22

  VpcArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /stack1/eureka/vpc/id
      Type: String
      Value: !Ref cfVPC

  SubnetArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /stack1/eureka/subnet/id
      Type: String
      Value: !Ref cfSubnet1
